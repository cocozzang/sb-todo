name: CICD

on:
  push:
    tags:
      - '*.*.*'

permissions:
  contents: read

# test code가 있다면 test 진행
# docker login
# docker image 빌드 후 docker hub에 latest와 현재 release버전 tag를 각각 push
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build the nestjs_app image
        run: |
          docker build \
            --platform linux/amd64 \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/sb-todo-nestjs-server:latest \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/sb-todo-nestjs-server:${{ github.ref_name }} \
            .

      - name: Push Docker
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/sb-todo-nestjs-server:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/sb-todo-nestjs-server:${{ github.ref_name }}

  # ec2 연결
  # docker hub에서 image pull
  # 새 image로 container 다시 실행
  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    steps:
      # 현재 배포서버에서 어떤 profile의 container가 동작중인지 확인하고 그에 따라 필요한 변수들이 선언하깅.
      - name: Set target IP
        run: |
          STATUS=$(curl -o /dev/null -w "%{http_code}" "http://${{ secrets.EC2_HOST }}/app-profile")
          echo $STATUS
          if [ $STATUS = 200 ]; then
            CURRENT_UPSTREAM=$(curl -s "http://${{ secrets.EC2_HOST }}/app-profile")
          else
            CURRENT_UPSTREAM=green
          fi
          echo CURRENT_UPSTREAM=$CURRENT_UPSTREAM >> $GITHUB_ENV
          if [ $CURRENT_UPSTREAM = blue ]; then
            echo "CURRENT_PORT=3000" >> $GITHUB_ENV
            echo "CURRENT_UPSTREAM=blue" >> $GITHUB_ENV
            echo "TARGET_PORT=3001" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
          else
            echo "CURRENT_PORT=3001" >> $GITHUB_ENV
            echo "CURRENT_UPSTREAM=green" >> $GITHUB_ENV
            echo "TARGET_PORT=3000" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV
          fi

      # TARGET_UPSTREAM에 최신 docker 이미지로 생성한 container를 실행하고 기존의 CURRENT_UPSTREAM container와 image를 삭제
      # 삭제전에 nginx upstream을 변경을 해줘야함 nginx upstream이 CURRENT_UPSTREAM으로 물려있는데 upstream 변경 전에
      # 기존 upstream을 중지시켜버리면 502뜸;
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            cd ${{ secrets.EC2_APP_DIR }}
            echo ${{ secrets.DOCKERHUB_PASSWORD }} | sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/sb-todo-nestjs-server:latest
            sudo docker compose --env-file .env.prod -f compose.prod.yaml up -d --no-deps app_${{ env.TARGET_UPSTREAM }}

      # docker container가 정상 동작하는지 확인하고 nginx upstream을 변경.
      # health check이 실패하면 다음 job은 실행되지 않습니다.
      - name: Check deploy server URL
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ secrets.EC2_HOST }}:${{env.TARGET_PORT}}/app-profile
          max-attempts: 3
          retry-delay: 15s

      - name: Change nginx upstream to TARGET_UPSTREAM and remove previous upstream container
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker exec -i nginx bash -c 'echo "set \$service_url app_${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -s reload'

      - name: Remove previous container and image
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker stop app_${{env.CURRENT_UPSTREAM}}
            sudo docker rm app_${{env.CURRENT_UPSTREAM}}
            sudo docker image prune -f

      # http://${{ secrets.EC2_HOST }}/app-profile에 get요청시
      # ${{ env.TARGET_UPSTREAM}} 값과 200상태코드가 응답되는 것을 확인할래용.
      - name: Check deploy server URL
        run: |
          RESPONSE=$(curl -s -w "%{http_code}" -o /dev/null "http://${{ secrets.EC2_HOST }}/app-profile")
          HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
          BODY=$(curl -s "http://${{ secrets.EC2_HOST }}/app-profile")

          if [ "$HTTP_STATUS" -eq 200 ] && [ "$BODY" == "${{ env.TARGET_UPSTREAM }}" ]; then
            echo "Deploy server is responding correctly."
          else
            echo "Unexpected response: HTTP status $HTTP_STATUS and body $BODY"
            exit 1
          fi
